{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","analytics","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","disabled","props","messageClass","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAW4B,IAAzBA,IAASC,KAAKC,QACfF,IAASG,cAAc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAInB,IAAMC,EAAOX,IAASW,OAChBC,EAAYZ,IAASY,YACTZ,IAASa,YAoB3B,SAASC,IAKP,OACE,qCACE,wBAAQC,UAAU,UAAUC,QANP,WACvB,IAAMC,EAAW,IAAIjB,IAASW,KAAKO,mBACnCP,EAAKQ,gBAAgBF,IAInB,iCACA,2GAKN,SAASG,IACP,OAAOT,EAAKU,aACV,wBAAQN,UAAU,WAAWC,QAAS,kBAAKL,EAAKW,WAAhD,sBAIJ,SAASC,IAEP,IAAMC,EAAQC,mBAERC,EAAcd,EAAUe,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IALpC,EAOEC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAPU,sBASiBC,mBAAS,IAT1B,mBASVC,EATU,KASCC,EATD,KAWXC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQ7B,EAAKU,YAAvBoB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAW7C,IAASY,UAAUkC,WAAWC,kBACzCN,MACAC,aATgB,OAYlBN,EAAa,IAEbZ,EAAMwB,QAAQC,eAAe,CAAEC,SAAU,WAdvB,2CAAH,sDAiBjB,OACE,qCACE,iCAEGjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAEvD,sBAAMC,IAAKhC,OAGb,uBAAMiC,SAAUpB,EAAhB,UACE,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,UAEhE,wBAAQG,KAAK,SAASC,UAAW3B,EAAjC,sCAMR,SAASkB,EAAYU,GAAO,IAAD,EACOA,EAAMT,QAA9BV,EADiB,EACjBA,KAAMH,EADW,EACXA,IAAKC,EADM,EACNA,SAEbsB,EAAevB,IAAQ9B,EAAKU,YAAYoB,IAAM,OAAS,WAE7D,OACE,mCACE,sBAAK1B,UAAS,kBAAaiD,GAA3B,UACE,qBAAKC,IAAKvB,GAAY,qEACtB,4BAAIE,SAMGsB,MAlGf,WAAgB,IAAD,EAEEC,YAAaxD,GAArByD,EAFM,oBAIb,OACE,sBAAKrD,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,sEACA,cAACK,EAAD,OAGF,kCACGgD,EAAO,cAAC7C,EAAD,IAAe,cAACT,EAAD,UC3BhBuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.890f6530.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nif(firebase.apps.length === 0) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyBrx4PaZoKHK9w2ajmLdbu-MgmFJGJXbk8\",\n    authDomain: \"fir-chat-f02c7.firebaseapp.com\",\n    projectId: \"fir-chat-f02c7\",\n    storageBucket: \"fir-chat-f02c7.appspot.com\",\n    messagingSenderId: \"24824963001\",\n    appId: \"1:24824963001:web:e89b57d3f879a74402a068\",\n    measurementId: \"G-HG2DKD7834\"\n  })\n}\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />      \n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn(){\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n  return(\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\n      <p>Do not violate the community guidelines or you will be banned for life!</p>\n    </>\n  )\n}\n\nfunction SignOut(){\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={()=> auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom(){\n\n  const dummy = useRef();\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async(e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (\n    <>\n      <main>\n      \n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg}/>)}\n      \n        <span ref={dummy}></span>\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} />\n        \n        <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props){\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <>\n      <div className={`message ${messageClass}`}>\n        <img src={photoURL || 'https://cdn.icon-icons.com/icons2/1371/PNG/512/robot02_90810.png'} />\n        <p>{text}</p>\n      </div>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}